wall = manda mensagens para todos os usuarios logados no servidor
dmesg = conseguimos visualizar as informações que foram geradas no processo de boot do kernel
df -h = verifica espaço nos volumes criados
df -i "inodes"
ip -br a = tras infos de ip organizado
tree -L 1 = listar diretorio
uname -a = pega as infos do so, data hora e afins
pwd = mostra o diretorio atual
sudo -i = invocar o root
ll = listar diretorio
diff = pega a diferença entre dois arquivos, por exemplo diff index.html /updates/index.html irá comparar um arquivo no diretorio local com o outro arquivo com mesmo nome em outro diretorio
fdisk -l = mais infos dos discos sda sdb sdc
netstat = atunp tras mais informações ver portas abertas
ps -ef = verifica os processos rodando. se der um | grep mais init vai trazer infos sobre inicialização
top = verifica os processos rodando e mostra um cabeçalho de informações. processo com -20 eh o mais prioritário
chmod = altera permissão
touch = cria arquivo
chmod +x arq1 = altera permissao do arquivo arq1 
ls -lha "nome do arquivo" = verifica permissões do arquivo
du -sh * = verifica os diretorios e o espaço usado por cada diretorio
sudo find . -xdev -type f -size +100M =  procura arquivos maiores que 100Mb
history =  ve os ultimos 1000 comandos
history | tail =  tras somente os ultimos 10
cat + arquivo =  visualiza o conteudo do arquivo sendo texto
!* = pega tudo que foi escrito apos o comando anterior, exemplo:
touch teste1 teste2 teste3
chmod +x !* =  alterou as permissoes dos arquivos teste1 teste2 e teste3
alt + t =  inverte os argumentos
rm + nome do arquivo =  apaga o arquivo
tail -f /var/log/cron/abc.log pega as infos que estao ocorrendo no momento
/etc/fstab = local onde fica descrito os diretorios que sao mapeados 
lsblk = verifica os volumes apresentados no servidor
dd if=/dev/nvme1n1 of=/dev/null bs=1M ajusta o disco informado a melhor performance possivel 1M 
sudo yum install -y fio = programa que melhora performance do disco 
sudo fio --filename=/dev/nvme2n1 --rw=read --bs=128k --iodepth=32 --ioengine=libaio --direct=1 --name=volume-initialize
journalctl --since "2021-01-01 01:00:00" --until "2021-01-16 01:00:00" =  tras logs do periodo de dias 
journalctl --since "2 hours ago" =  tras informaçoes das ultimas 2 horas
journalctl  -k = tras as infos de kernel
journalctl -u ssh = tras todas as informações de log
journalctl -u docker
journalctl -u zabbix
journalctl -u ssh -f =  tras o que ocorre no momento
journalctl -u ssh -n 3 = tras as ultimas 3 linhas
journalctl -u ssh -r = tras os mais novos primeiro
journalctl -u ssh -r -o json-pretty = tras no formato json
journalctl -u ssh -r -o json-pretty -p "emerg" =  no formato json que sejam de emergencia
journalctl -u ssh -r -o json-pretty -p "err" =  no formato json que sejam error
journalctl -u ssh -r -o json-pretty -p "debug" =  no formato json que sejam debug
journalctl -u ssh -r -o json-pretty -p "emerg".."err" = tras mensagens de emergencia e de erro
journalctl -k -r -p "emerg" =  tras as mensagens de emergencia de kernel mais recentes
id nomedousuario = tras o UID do usuario
journalctl _UID=1000 = tras as informações do ID do usuario em questao
usuario apache = www-data
cat /etc/issue = mostra versao do sistema instalado
cat /etc/redhat-release =  versao centos/redhat instalado

How to remove old kernel versions on Ubuntu 18.04 or above
Type the following apt command or apt-get command:
sudo apt --purge autoremove
sudo apt-get --purge autoremove

Apagar dados de log
https://ubuntuhandbook.org/index.php/2020/12/clear-systemd-journal-logs-ubuntu/


Going to free up Ubuntu system disk space? Try clearing the systemd journal logs, it may free up a few GB of space.

By using the Disk Usage Analyzer tool, I found that /var/log/journal takes more than 4 GB system space in my Ubuntu 20.04.


Systemd has its own logging system called the journal, and the log files are stored in /var/log/journal. As long as I don’t need the logs for any debugging, it’s safe to delete these files. And following steps will show you how.

1. First open terminal from system app launcher, and you may run command to check out the current disk usage of all journal files:

journalctl --disk-usage

2. If you decide to clear the logs, run command to rotate the journal files. All currently active journal files will be marked as archived, so that they are never written to in future.

sudo journalctl --rotate
3. Now clear the journal logs by choosing one of following commands:

Delete journal logs older than X days:
sudo journalctl --vacuum-time=2days
Delete log files until the disk space taken falls below the specified size:
sudo journalctl --vacuum-size=100M
Delete old logs and limit file number to X:
sudo journalctl --vacuum-files=5
4. You can also edit the configuration file to limit the journal log disk usage (100 MB for example).

Run command in terminal to edit the file via Gedit text editor:

sudo -H gedit /etc/systemd/journald.conf
When the file opens, un-comment (remove # at the beginning) the line #SystemMaxUse= and change it to SystemMaxUse=100M.









